(srfi-14#->char-set (procedure srfi-14#->char-set (*) (struct char-set))
                    (((struct char-set)) #(1))
                    ((string) (string->char-set #(1)))
                    ((char) (char-set #(1))))

(srfi-14#char-set (#(procedure #:enforce) srfi-14#char-set (#!rest char) (struct char-set)))
(srfi-14#char-set->list (#(procedure #:clean #:enforce) srfi-14#char-set->list ((struct char-set)) list))
(srfi-14#char-set->string (#(procedure #:clean #:enforce) srfi-14#char-set->string ((struct char-set)) string))
(srfi-14#char-set-adjoin (#(procedure #:clean #:enforce) srfi-14#char-set-adjoin ((struct char-set) #!rest char) (struct char-set)))
(srfi-14#char-set-adjoin! (#(procedure #:clean #:enforce) srfi-14#char-set-adjoin! ((struct char-set) #!rest char) (struct char-set)))
(srfi-14#char-set-any (#(procedure #:enforce) srfi-14#char-set-any ((procedure (char) *) (struct char-set)) *))
(srfi-14#char-set-complement (#(procedure #:clean #:enforce) srfi-14#char-set-complement ((struct char-set)) (struct char-set)))
(srfi-14#char-set-complement! (#(procedure #:clean #:enforce) srfi-14#char-set-complement! ((struct char-set)) (struct char-set)))
(srfi-14#char-set-contains? (#(procedure #:clean #:enforce) srfi-14#char-set-contains? ((struct char-set) char) boolean))
(srfi-14#char-set-copy (#(procedure #:clean #:enforce) srfi-14#char-set-copy ((struct char-set)) (struct char-set)))
(srfi-14#char-set-count (#(procedure #:clean #:enforce) srfi-14#char-set-count ((procedure (char) *) (struct char-set)) fixnum))
(srfi-14#char-set-cursor (#(procedure #:clean #:enforce) srfi-14#char-set-cursor ((struct char-set)) fixnum))
(srfi-14#char-set-cursor-next (#(procedure #:clean #:enforce) srfi-14#char-set-cursor-next ((struct char-set) fixnum) fixnum))
(srfi-14#char-set-delete (#(procedure #:clean #:enforce) srfi-14#char-set-delete ((struct char-set) #!rest char) (struct char-set)))
(srfi-14#char-set-delete! (#(procedure #:clean #:enforce) srfi-14#char-set-delete! ((struct char-set) #!rest char) (struct char-set)))
(srfi-14#char-set-diff+intersection (#(procedure #:clean #:enforce) srfi-14#char-set-diff+intersection ((struct char-set) #!rest (struct char-set)) (struct char-set) (struct char-set)))
(srfi-14#char-set-diff+intersection! (#(procedure #:clean #:enforce) srfi-14#char-set-diff+intersection! ((struct char-set) #!rest (struct char-set)) (struct char-set) (struct char-set)))
(srfi-14#char-set-difference (#(procedure #:clean #:enforce) srfi-14#char-set-difference ((struct char-set) #!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-difference! (#(procedure #:clean #:enforce) srfi-14#char-set-difference! ((struct char-set) #!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-every (#(procedure #:enforce) srfi-14#char-set-every ((procedure (char) *) (struct char-set)) boolean))
(srfi-14#char-set-filter (#(procedure #:enforce) srfi-14#char-set-filter ((procedure (char) *) (struct char-set) #!optional (struct char-set)) (struct char-set)))
(srfi-14#char-set-filter! (#(procedure #:enforce) srfi-14#char-set-filter! ((procedure (char) *) (struct char-set) #!optional (struct char-set)) (struct char-set)))
(srfi-14#char-set-fold (#(procedure #:enforce) srfi-14#char-set-fold ((procedure (char *) *) * (struct char-set)) *))
(srfi-14#char-set-for-each (#(procedure #:enforce) srfi-14#char-set-for-each ((procedure (char) . *) (struct char-set)) undefined))
(srfi-14#char-set-hash (#(procedure #:clean #:enforce) srfi-14#char-set-hash ((struct char-set) #!optional number) number))
(srfi-14#char-set-intersection (#(procedure #:clean #:enforce) srfi-14#char-set-intersection (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-intersection! (#(procedure #:clean #:enforce) srfi-14#char-set-intersection! (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-map (#(procedure #:enforce) srfi-14#char-set-map ((procedure (char) char) (struct char-set)) (struct char-set)))
(srfi-14#char-set-ref (#(procedure #:clean #:enforce) srfi-14#char-set-ref ((struct char-set) fixnum) char))
(srfi-14#char-set-size (#(procedure #:clean #:enforce) srfi-14#char-set-size ((struct char-set)) fixnum))
(srfi-14#char-set-unfold (#(procedure #:enforce) srfi-14#char-set-unfold (procedure procedure procedure * #!optional (struct char-set)) (struct char-set)))
(srfi-14#char-set-unfold! (#(procedure #:enforce) srfi-14#char-set-unfold! (procedure procedure procedure * (struct char-set)) (struct char-set)))
(srfi-14#char-set-union (#(procedure #:clean #:enforce) srfi-14#char-set-union (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-union! (#(procedure #:clean #:enforce) srfi-14#char-set-union! (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-xor (#(procedure #:clean #:enforce) srfi-14#char-set-xor (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set-xor! (#(procedure #:clean #:enforce) srfi-14#char-set-xor! (#!rest (struct char-set)) (struct char-set)))
(srfi-14#char-set:ascii (struct char-set))
(srfi-14#char-set:blank (struct char-set))
(srfi-14#char-set:digit (struct char-set))
(srfi-14#char-set:empty (struct char-set))
(srfi-14#char-set:full (struct char-set))
(srfi-14#char-set:graphic (struct char-set))
(srfi-14#char-set:hex-digit (struct char-set))
(srfi-14#char-set:iso-control (struct char-set))
(srfi-14#char-set:letter (struct char-set))
(srfi-14#char-set:letter+digit (struct char-set))
(srfi-14#char-set:lower-case (struct char-set))
(srfi-14#char-set:printing (struct char-set))
(srfi-14#char-set:punctuation (struct char-set))
(srfi-14#char-set:symbol (struct char-set))
(srfi-14#char-set:title-case (struct char-set))
(srfi-14#char-set:upper-case (struct char-set))
(srfi-14#char-set:whitespace (struct char-set))

(srfi-14#char-set= (#(procedure #:clean #:enforce) srfi-14#char-set= (#!rest (struct char-set)) boolean)
                   (() '#t)
                   (((struct char-set)) (let ((#(tmp) #(1))) '#t)))
(srfi-14#char-set<= (#(procedure #:clean #:enforce) srfi-14#char-set<= (#!rest (struct char-set)) boolean)
                    (() '#t)
                    (((struct char-set)) (let ((#(tmp) #(1))) '#t)))

(srfi-14#char-set? (#(procedure #:pure #:predicate (struct char-set)) srfi-14#char-set? (*) boolean))
(srfi-14#end-of-char-set? (#(procedure #:clean #:enforce) srfi-14#end-of-char-set? (fixnum) boolean))
(srfi-14#list->char-set (#(procedure #:clean #:enforce) srfi-14#list->char-set ((list-of char) #!optional (struct char-set)) (struct char-set)))
(srfi-14#list->char-set! (#(procedure #:clean #:enforce) srfi-14#list->char-set! ((list-of char) #!optional (struct char-set)) (struct char-set)))
(srfi-14#string->char-set (#(procedure #:clean #:enforce) srfi-14#string->char-set (string #!optional (struct char-set)) (struct char-set)))
(srfi-14#string->char-set! (#(procedure #:clean #:enforce) srfi-14#string->char-set! (string #!optional (struct char-set)) (struct char-set)))
(srfi-14#ucs-range->char-set (#(procedure #:clean #:enforce) srfi-14#ucs-range->char-set (fixnum fixnum #!optional * (struct char-set)) (struct char-set)))
(srfi-14#ucs-range->char-set! (#(procedure #:clean #:enforce) srfi-14#ucs-range->char-set! (fixnum fixnum #!optional * (struct char-set)) (struct char-set)))
